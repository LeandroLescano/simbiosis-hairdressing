---
interface Props {
  class?: string;
  animated?: boolean;
}

const {animated} = Astro.props;
---

<div
  class={`card ${animated && "animated"} rounded-lg border bg-card text-card-foreground shadow-sm overflow-hidden ${Astro.props.class}`}
>
  <slot name="header" />
  {
    Astro.slots.has("content") && (
      <div class="p-4" data-id="26">
        <slot name="content" />
      </div>
    )
  }
</div>

<style>
  .card.animated {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .card.animated:hover {
    --tw-scale-x: 1.02;
    --tw-scale-y: 1.02;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y))
      rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))
      scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
    --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),
      0 2px 4px -2px var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),
      var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
  }
</style>
